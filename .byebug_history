q
record.recommendable
!record.parent_recommendable?
record.parent_recommendable?
klass
q
c
klass
record
q
record
c
setting_params
@setting
@setting.update(setting_params)
@setting
params
q
c
activation_link_for(choice)
c
activation_link_for(choice)
c
activation_link_for(choice)
activation_link_for 
q
c
settings.count
settings
subsettings
settings
q
self.subvectors.first.all_settings
self.subvectors.first
self.subvectors.count
self.subvectors
self.parent_id
self.parent
self
vector.subvectors
Vector.count
self
q
Vector.count
q
vector
q
Vector.count
Score.count
platform.scores
q
record.scores
record
q
self.class.to_s
self.class
q
c
self.class.to_s.match? "Platform"
self.class.to_s.match? "platform"
self.class.to_s.match? /platform/
self.class.to_s
self.class
q
fixture
fexture
fixture.update(they_say: theirs)
fixture
theirs
fixture
q
assert_equal platform.name, 'facebook'
platform.name
platform
q
c
vector
c
Category.count
Vector.count
vector
exit
subject
c
cloak_policy_vectors(:privacy)
Vector.count
Vector.top_level
q
c
self.class.ancestors
c
self.class.ancestors.include? 'Minitest::Spec'
self.class.ancestors.grep('Minitest::Spec')
self.class.ancestors.grep('ActiveSupport::TestCase')
self.class.ancestors.grep('Active')
self.class.ancestors
self
