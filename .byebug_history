q
vector.subvectors.count == 1
vector.subvectors.count
vector.subvectors_count
vector
q
exit
CloakPolicy::Vectorc
CloakPolicy::Vector
Vector.count
Vector.size
Vector.all
Vector.all.count
Vector.count
Vector
Vector.count
Vector.where('subvectors.count = ?', 0)
Vector
Vector.where(parent_ids.include? 'id')
q
Vector.where(parent_ids.include? 'id')
qVector.where(parent_ids.include? 'id')
q
Vector.last.scores.last
Vector.last.scores.last.scorable
Vector.last
newvector
q
c
q
newvector
c
q
Score.last
CloakPolicy::Vector.last.scores
CloakPolicy::Vector.last
newvector
c
self.scores.last.vector_id
self.scores.vector_id
self.id
self.scores
self
score.valid?
score.save
score
c
q
c
q
score.scorable
score.vector
score = vector.scores.last
vector = Vector.last 
Vector.find(Vector.last.scores.last.vector_id)
Vector.last.scores.last.vector_id
Vector.last.scores.last
Vector.last.parent_id
Vector.last
Vector.last.scores.last
Vector.last.scores
Vector.last
Score.last
q
self.id
vid
q
score
score.save
score.valid?
score
c
self.id
self.scores.new
self.valid?
self
q
vector.scores
vector
Score.last
c
Score.new
self.parent_id
self.valid?
self
slef
q
c
setting
q
c
@recommendable.recommendable
@recommendable.deactivate!
@recommendable
q
record.recommendable
!record.parent_recommendable?
record.parent_recommendable?
klass
q
c
klass
record
q
record
c
setting_params
@setting
@setting.update(setting_params)
@setting
params
q
c
activation_link_for(choice)
c
activation_link_for(choice)
c
activation_link_for(choice)
activation_link_for 
q
c
settings.count
settings
subsettings
settings
q
self.subvectors.first.all_settings
self.subvectors.first
self.subvectors.count
self.subvectors
self.parent_id
self.parent
self
vector.subvectors
Vector.count
self
q
Vector.count
q
vector
q
Vector.count
Score.count
platform.scores
q
record.scores
record
q
self.class.to_s
self.class
q
c
self.class.to_s.match? "Platform"
self.class.to_s.match? "platform"
self.class.to_s.match? /platform/
self.class.to_s
self.class
q
fixture
fexture
fixture.update(they_say: theirs)
fixture
theirs
fixture
q
assert_equal platform.name, 'facebook'
platform.name
platform
q
c
vector
c
Category.count
Vector.count
vector
exit
subject
c
cloak_policy_vectors(:privacy)
Vector.count
Vector.top_level
q
c
self.class.ancestors
c
self.class.ancestors.include? 'Minitest::Spec'
self.class.ancestors.grep('Minitest::Spec')
self.class.ancestors.grep('ActiveSupport::TestCase')
self.class.ancestors.grep('Active')
self.class.ancestors
self
